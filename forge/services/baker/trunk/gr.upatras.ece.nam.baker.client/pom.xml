<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>gr.upatras.ece.nam</groupId>
	<artifactId>gr.upatras.ece.nam.baker.client</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>gr.upatras.ece.nam.baker.client Maven Webapp</name>
	<url>http://maven.apache.org</url>
	<description>Baker Client is a simple CXF JAX-RS webapp service acting as a client to Baker marketplace using spring configuration</description>



	<properties>
		<jackson.version>1.9.4</jackson.version>
		<maven-license-plugin.version>1.2.5</maven-license-plugin.version>
		<cxf.version>3.0.0</cxf.version>


		<!-- repositories for distribution -->
		<!-- snapshots -->
		<repoMavenSnapshotId>repo-snapshot</repoMavenSnapshotId>
		<repoMavenSnapshotName>repo-snapshot</repoMavenSnapshotName>
		<repoMavenSnapshotUrl>${nexusRepositories}/snapshots</repoMavenSnapshotUrl>
		<!-- releases -->
		<repoMavenId>repo-release</repoMavenId>
		<repoMavenName>repo-release</repoMavenName>
		<repoMavenUrl>${nexusRepositories}/releases</repoMavenUrl>
		<!-- thirdparty -->
		<repoMavenThirdpartyId>repo-third-party-release</repoMavenThirdpartyId>
		<repoMavenThirdpartyName>repo-third-party-release</repoMavenThirdpartyName>
		<repoMavenThirdpartyUrl>${nexusRepositories}/thirdparty</repoMavenThirdpartyUrl>


		<!-- encoding -->

		<encoding>utf-8</encoding>
		<encoding.build.source>${encoding}</encoding.build.source>
		<encoding.report.out>${encoding}</encoding.report.out>
		<project.build.sourceEncoding>${encoding}</project.build.sourceEncoding>
		<project.reporting.outputEncoding>${encoding}</project.reporting.outputEncoding>

		<openjpa.version>2.3.0</openjpa.version>
		<spring.version>4.0.5.RELEASE</spring.version>

		<shiro.version>1.2.3</shiro.version>
		<jetty.version>9.2.1.v20140609</jetty.version>
	</properties>


	<dependencies>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-server</artifactId>
			<version>${jetty.version}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-webapp</artifactId>
			<version>${jetty.version}</version>
		</dependency>
		

		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-client</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxrs</artifactId>
			<version>${cxf.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-security-cors</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-security-oauth2</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-jaxrs</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-exec</artifactId>
			<version>1.2</version>
		</dependency>

		<!-- openjpa -->

		<dependency>
			<groupId>org.apache.openjpa</groupId>
			<artifactId>openjpa</artifactId>
			<version>${openjpa.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.openjpa</groupId>
			<artifactId>openjpa-jdbc</artifactId>
			<version>${openjpa.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.openjpa</groupId>
			<artifactId>openjpa-persistence-jdbc</artifactId>
			<version>${openjpa.version}</version>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.4.179</version>
		</dependency>







	</dependencies>


	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-war-plugin</artifactId>
					<version>2.1.1</version>
					<configuration>
						<warName>${project.artifactId}-${project.version}</warName>
						<archive>
							<manifest>
								<mainClass>BakerClient</mainClass>
							</manifest>
						</archive>
					</configuration>
					<executions>
						<execution>
							<id>default-war</id>
							<phase>package</phase>
							<goals>
								<goal>war</goal>
							</goals>
						</execution>
					</executions>
				</plugin>







				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>1.7</source>
						<target>1.7</target>
					</configuration>
				</plugin>



				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.openjpa
										</groupId>
										<artifactId>
											openjpa-maven-plugin
										</artifactId>
										<versionRange>
											[2.2.1,)
										</versionRange>
										<goals>
											<goal>enhance</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>


			<!-- openjpa enhance plugin configuration -->
			<plugin>
				<groupId>org.apache.openjpa</groupId>
				<artifactId>openjpa-maven-plugin</artifactId>
				<version>${openjpa.version}</version>
				<configuration>
					<includes>gr.upatras.ece.nam.baker.client.model</includes>
					<excludes>**/gr.upatras.ece.nam.baker.client/*.class</excludes>
					<addDefaultConstructor>true</addDefaultConstructor>
					<enforcePropertyRestrictions>true</enforcePropertyRestrictions>

				</configuration>
				<executions>
					<execution>
						<id>enhancer-classes</id>
						<phase>process-classes</phase>
						<goals>
							<goal>enhance</goal>
						</goals>
					</execution>
				</executions>

				<dependencies>
					<dependency>
						<groupId>org.apache.openjpa</groupId>
						<artifactId>openjpa</artifactId>
						<!-- set the version to be the same as the level in your runtime -->
						<version>${openjpa.version}</version>
					</dependency>
				</dependencies>
			</plugin>


			<!-- check the following for running embedded jetty and war http://uguptablog.blogspot.gr/2012/09/embedded-jetty-executable-war-with.html 
				mvn clean install and to run the App: java -jar myapp.war -D -->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.3</version>
				<executions>
					<execution>
						<id>jetty-classpath</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<configuration>
							<includeGroupIds>org.eclipse.jetty,javax.servlet</includeGroupIds>
							<excludeArtifactIds>jstl</excludeArtifactIds>
							<excludes>META-INF/ECLIPSEF.*</excludes>
							<outputDirectory>
								${project.build.directory}/${project.artifactId}-${project.version}
							</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>main-class-placement</id>
						<phase>prepare-package</phase>
						<configuration>
							<tasks>
								<move
									todir="${project.build.directory}/${project.artifactId}-${project.version}/">
									<fileset dir="${project.build.directory}/classes/">
										<include name="BakerClient.class" />
									</fileset>
								</move>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<!-- license plugin -->

			<plugin>
				<groupId>com.google.code.maven-license-plugin</groupId>
				<artifactId>maven-license-plugin</artifactId>
				<version>${maven-license-plugin.version}</version>
				<configuration>
					<header>src/license/header.txt</header>
					<includes>
						<include>src/main/**/*.java</include>
						<include>src/test/**/*.java</include>
					</includes>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2</version>
				<configuration>
					<executable>java</executable>
					<arguments>
						<argument>-Dorg.eclipse.jetty.webapp.LEVEL=DEBUG</argument>
						<argument>-cp</argument>
						<classpath />
						<argument>BakerClient</argument>
						<argument>http://pomxml8080</argument>
					</arguments>
				</configuration>
			</plugin>

		</plugins>
	</build>


	<repositories>
		<!-- ci-cpr02 Nexus Repositories -->
		<repository>
			<id>${repoMavenSnapshotId}</id>
			<name>${repoMavenSnapshotName}</name>
			<url>${repoMavenSnapshotUrl}</url>
		</repository>
		<repository>
			<id>${repoMavenId}</id>
			<name>${repoMavenName}</name>
			<url>${repoMavenUrl}</url>
		</repository>
		<repository>
			<id>${repoMavenThirdpartyId}</id>
			<name>${repoMavenThirdpartyName}</name>
			<url>${repoMavenThirdpartyUrl}</url>
		</repository>

		<!-- Remote Repositories -->
		<repository>
			<id>central</id>
			<name>central-repository</name>
			<url>http://repo1.maven.org/maven2</url>
		</repository>
		<repository>
			<id>central2</id>
			<name>central2-repository</name>
			<url>http://repo2.maven.org/maven2</url>
		</repository>

		<!-- SpringSource repositories -->
		<repository>
			<id>com.springsource.repository.libraries.release</id>
			<name>SpringSource Enterprise Bundle Repository - SpringSource Library Releases</name>
			<url>http://repository.springsource.com/maven/libraries/release</url>
		</repository>
		<repository>
			<id>com.springsource.repository.libraries.external</id>
			<name>SpringSource Enterprise Bundle Repository - External Library Releases</name>
			<url>http://repository.springsource.com/maven/libraries/external</url>
		</repository>


	</repositories>



	<profiles>
		<!-- To make documentation: mvn clean -Pdocbkx install -Dmaven.test.skip=true -->

		<profile>
			<!--For continuous running: "mvn clean -Pjetty.integration jetty:run" 
				and access to http://127.0.0.1:13000/jaxrs-srvtest/hello/echo/SierraTangoNevadaxx 
				For jetty integration test: mvn clean -Pjetty.integration verify -->
			<id>jetty.integration</id>
			<build>
				<pluginManagement>
					<plugins>

						<plugin>
							<groupId>org.eclipse.jetty</groupId>
							<artifactId>jetty-maven-plugin</artifactId>
							<version>${jetty.version}</version>
							<configuration>
								<!-- Uncomment this to run it with jetty:run and secure port 8443 
									<jettyXml>${basedir}/src/test/resources/jetty.xml,${basedir}/src/test/resources/jetty-ssl.xml,${basedir}/src/test/resources/jetty-https.xml</jettyXml> -->

								<httpConnector>
									<port>13001</port>
								</httpConnector>
								<scanIntervalSeconds>4</scanIntervalSeconds>

								<webApp>
									<contextPath>/</contextPath>
								</webApp>


							</configuration>
							<executions>
								<execution>
									<id>run-jetty</id>
									<goals>
										<goal>run</goal>
									</goals>
								</execution>
							</executions>
						</plugin>
					</plugins>
				</pluginManagement>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>1.5</version>
						<executions>
							<execution>
								<id>reserve-network-port</id>
								<goals>
									<goal>reserve-network-port</goal>
								</goals>
								<phase>process-test-resources</phase>
								<configuration>
									<portNames>
										<portName>test.server.port</portName>
									</portNames>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.eclipse.jetty</groupId>
						<artifactId>jetty-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>start-jetty</id>
								<goals>
									<goal>run-war</goal>
								</goals>
								<phase>pre-integration-test</phase>
								<configuration>
									<httpConnector>
										<port>${test.server.port}</port>
									</httpConnector>
									<webApp>
										<contextPath>/rsbaker-srvtest</contextPath>
									</webApp>
									<stopPort>9999</stopPort>
									<stopKey>STOP</stopKey>
									<daemon>true</daemon>
								</configuration>
							</execution>
							<execution>
								<id>stop-jetty</id>
								<goals>
									<goal>stop</goal>
								</goals>
								<phase>post-integration-test</phase>
								<configuration>
									<stopKey>STOP</stopKey>
									<stopPort>9999</stopPort>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>2.8.1</version>
						<executions>
							<execution>
								<id>integration-test</id>
								<goals>
									<goal>integration-test</goal>
								</goals>
								<configuration>
									<systemPropertyVariables>
										<service.url>http://localhost:${test.server.port}/rsbaker-srvtest</service.url>
									</systemPropertyVariables>
								</configuration>
							</execution>
							<execution>
								<id>verify</id>
								<goals>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>



	</profiles>
</project>

